services:
  nginx:
    image: nginx:latest
    ports:
      - ${NGINX_PORT}:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ../.static:/app/.static
    depends_on:
      - django

  ############################################################
  ## Server and Worker
  ############################################################
  django:
    build:
      context: ..
      dockerfile: docker/od_contest/Dockerfile
    volumes:
      - ../src:/src
      - ../.env:/.env
      - ../.static:/.static
    command: sh -c "python manage.py collectstatic --noinput &&
                    gunicorn main.wsgi:application --bind 0.0.0.0:8000 --reload"
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always

  email_worker:
    build:
      context: ..
      dockerfile: docker/od_contest/Dockerfile
    volumes:
      - ../src:/src
      - ../.env:/.env
    command: celery -A main worker -n email@%h -l info -Q email_queue
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always

  schedule_worker:
    build:
      context: ..
      dockerfile: docker/od_contest/Dockerfile
    volumes:
      - ../src:/src
      - ../.env:/.env
    command: celery -A main beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always

  ############################################################
  ## Database
  ############################################################
  postgresql:
    image: postgres:latest
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./postgresql/data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: always

  redis:
    image: redis:latest
    ports:
      - ${REDIS_PORT}:6379
    restart: always

  ############################################################
  ## Monitoring
  ############################################################
  flower:
    build:
      context: ..
      dockerfile: docker/od_contest/Dockerfile
    ports:
      - ${FLOWER_PORT}:5555
    volumes:
      - ../src:/src
      - ../.env:/.env
    command: celery -A main flower --port=5555
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always
    profiles: [ "monitoring" ]

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus:/etc/prometheus
    ports:
      - ${PROMETHEUS_PORT}:9090
    restart: always
    profiles: [ "monitoring" ]

  blackbox_exporter:
    image: prom/blackbox-exporter:latest
    volumes:
      - ./blackbox_exporter:/etc/blackbox_exporter
    restart: always
    profiles: [ "monitoring" ]

  celery_exporter:
    image: danihodovic/celery-exporter:latest
    environment:
      - CE_BROKER_URL=${CELERY_EXPORTER_BROKEN}
    restart: always
    profiles: [ "monitoring" ]

  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - ${ALERT_MANAGER_PORT}:9093
    volumes:
      - ./alertmanager:/etc/alertmanager
    restart: always
    profiles: [ "monitoring" ]
