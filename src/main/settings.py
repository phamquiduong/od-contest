"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from enum import StrEnum
import os
from pathlib import Path

from dotenv import load_dotenv


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Environment
class Environments(StrEnum):
    DEV = 'dev'
    DOCKER = 'docker'
    GITHUB = 'github'


ENVIRONMENT = os.getenv('ENVIRONMENT', Environments.DEV)


# Load dot-env file
if ENVIRONMENT != Environments.GITHUB and not load_dotenv(BASE_DIR / '../.env'):
    raise FileNotFoundError('.env file not found')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'github_environment' if ENVIRONMENT == Environments.GITHUB else os.environ['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '*').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_prometheus',
    'django_celery_beat',
    'django_celery_results',

    # User applications
    'common',
    'authentication',
    'mail',
    'celery_tasks',
    'upload',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

SQLITE3_CONFIG = {
    'ENGINE': 'django.db.backends.sqlite3',
    'NAME': BASE_DIR / '../db.sqlite3',
}

POSTGRESQL_CONFIG = {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': os.getenv('POSTGRES_DB'),
    'USER': os.getenv('POSTGRES_USER'),
    'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
    'HOST': os.getenv('POSTGRES_HOST'),
    'PORT': os.getenv('POSTGRES_PORT'),
}

DATABASES = {
    'default': POSTGRESQL_CONFIG if ENVIRONMENT == Environments.DOCKER else SQLITE3_CONFIG
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'authentication.validators.password.CustomPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = os.getenv('LANGUAGE_CODE', 'vi')

TIME_ZONE = os.getenv('TIME_ZONE', 'Asia/Ho_Chi_Minh')

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / '../.static'
STATIC_ROOT.mkdir(parents=True, exist_ok=True)

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / '../.media'
MEDIA_ROOT.mkdir(parents=True, exist_ok=True)

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Custom Auth User Model
AUTH_USER_MODEL = 'authentication.User'


# Setup cache server
LOCAL_MEMORY_CACHING = {
    'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    'LOCATION': 'unique-snowflake',
}

REDIS_CACHING = {
    'BACKEND': 'django.core.cache.backends.redis.RedisCache',
    'LOCATION': os.getenv('CACHE_LOCATION')
}

CACHES = {
    'default': REDIS_CACHING if ENVIRONMENT == Environments.DOCKER else LOCAL_MEMORY_CACHING
}


# Setup session
SESSION_IN_CACHE = 'django.contrib.sessions.backends.cache'
SESSION_IN_DB = 'django.contrib.sessions.backends.db'
SESSION_ENGINE = SESSION_IN_CACHE if ENVIRONMENT == Environments.DOCKER else SESSION_IN_DB


# Celery setup
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = 'django-db'


# Sending mail
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('SMTP_HOST')
EMAIL_PORT = os.getenv('SMTP_PORT')
EMAIL_HOST_USER = os.getenv('SMTP_USER')
EMAIL_HOST_PASSWORD = os.getenv('SMTP_PASS')
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console_format': {
            'format': '[{levelname}] {asctime} {name}:{lineno} - {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console_format',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': os.getenv('LOG_LEVEL', 'INFO'),
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['console'],
            'level': os.getenv('SQL_LOG_LEVEL', 'INFO'),
        },
    },
}

LOG_REQUEST = os.getenv('LOG_REQUEST', 'True').lower() == 'true'
if LOG_REQUEST:
    MIDDLEWARE.append('common.middlewares.log_request.LogRequestMiddleware')
